package main

import (
	"fmt"
	"io/ioutil"
	"os"
)

type SetupConfig struct {
	Consul   string
	Config   string
	Template string
	ServiceDescription
}

func (sc SetupConfig) ConfigIn() string {
	return sc.Config + ".tpl"
}

func (sc SetupConfig) ConfigOut() string {
	return sc.Config
}

func SetupService(cfg SetupConfig) error {
	f, err := os.OpenFile(cfg.ConfigIn(), os.O_RDWR|os.O_TRUNC|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer f.Close()

	cfg.ServiceDescription.Image = fmt.Sprintf(`{{if key "%s"}}{{key "%s"}}{{else}}{{key "%s"}}{{end}}`,
		cfg.ServiceDescription.NodeDeploy(),
		cfg.ServiceDescription.NodeDeploy(),
		cfg.ServiceDescription.AppCurrent())

	err = cfg.ServiceDescription.SaveTo(f)
	if err != nil {
		return err
	}

	err = saveConsulTemplate(cfg)
	if err != nil {
		return err
	}

	return saveUpstartDefinition(cfg)
}

func saveConsulTemplate(cfg SetupConfig) error {
	tpl := fmt.Sprintf(`# Generated by sheepit
template {
	source = "%s"
	destination = "%s"
	command = "service %s restart"
}`, cfg.ConfigIn(), cfg.ConfigOut(), cfg.Name)

	return ioutil.WriteFile(cfg.Template, []byte(tpl), 0644)
}

func saveUpstartDefinition(cfg SetupConfig) error {
	tpl := fmt.Sprintf(`# Generated by sheepit
description "SheepIt Service %s"
author "sheepit"

console log

start on filesystem and started docker
stop on runlevel [!2345]
respawn

pre-start script
sheepit service -f %s
end script

exec  /usr/bin/docker start -a %s
`, cfg.Name, cfg.ConfigOut(), cfg.Name)

	initFile := fmt.Sprintf("/etc/init/%s.conf", cfg.Name)

	return ioutil.WriteFile(initFile, []byte(tpl), 0644)
}
